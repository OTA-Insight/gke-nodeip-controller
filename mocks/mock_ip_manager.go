// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/ipmanager/ipmanager.go

// Package mock_ipmanager is a generated GoMock package.
package mock_ipmanager

import (
	context "context"
	ipmanager "nodeip-controller/pkg/ipmanager"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockIpManager is a mock of IpManager interface.
type MockIpManager struct {
	ctrl     *gomock.Controller
	recorder *MockIpManagerMockRecorder
}

// MockIpManagerMockRecorder is the mock recorder for MockIpManager.
type MockIpManagerMockRecorder struct {
	mock *MockIpManager
}

// NewMockIpManager creates a new mock instance.
func NewMockIpManager(ctrl *gomock.Controller) *MockIpManager {
	mock := &MockIpManager{ctrl: ctrl}
	mock.recorder = &MockIpManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIpManager) EXPECT() *MockIpManagerMockRecorder {
	return m.recorder
}

// AssignAllowedIpAddress mocks base method.
func (m *MockIpManager) AssignAllowedIpAddress(arg0 context.Context, arg1, arg2 string) (ipmanager.IpAddress, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssignAllowedIpAddress", arg0, arg1, arg2)
	ret0, _ := ret[0].(ipmanager.IpAddress)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AssignAllowedIpAddress indicates an expected call of AssignAllowedIpAddress.
func (mr *MockIpManagerMockRecorder) AssignAllowedIpAddress(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssignAllowedIpAddress", reflect.TypeOf((*MockIpManager)(nil).AssignAllowedIpAddress), arg0, arg1, arg2)
}

// IsAllowedIpAddress mocks base method.
func (m *MockIpManager) IsAllowedIpAddress(arg0 string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsAllowedIpAddress", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsAllowedIpAddress indicates an expected call of IsAllowedIpAddress.
func (mr *MockIpManagerMockRecorder) IsAllowedIpAddress(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsAllowedIpAddress", reflect.TypeOf((*MockIpManager)(nil).IsAllowedIpAddress), arg0)
}

// Stop mocks base method.
func (m *MockIpManager) Stop() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Stop")
}

// Stop indicates an expected call of Stop.
func (mr *MockIpManagerMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockIpManager)(nil).Stop))
}
